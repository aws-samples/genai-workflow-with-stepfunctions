{
    "Comment": "Use generative AI to process a list of records",
    "StartAt": "Get parameters",
    "QueryLanguage": "JSONata",
    "States": {
        "Get parameters": {
            "Type": "Task",
            "Next": "Get record Ids",
            "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
            "Arguments": {
                "Name": "${QUERY_PARAMETER_NAME}"
            },
            "Output": {
                "lastUpdatedTime": "{% $states.input.LastUpdatedTime %}"
            },
            "Assign": {
                "AthenaParameters": "{% $parse($states.result.Parameter.Value) %}"
            }
        },
        "Get record Ids": {
            "Type": "Task",
            "Resource": "arn:aws:states:::athena:startQueryExecution.sync",
            "Next": "Get record Ids from query result",
            "Arguments": {
                "QueryExecutionContext": {
                    "Catalog": "AwsDataCatalog",
                    "Database": "{% $AthenaParameters.Database %}"
                },
                "QueryString": "{% $replace($AthenaParameters.GetRecordIdsQuery, '{}', $states.input.lastUpdatedTime) %}",
                "WorkGroup": "{% $AthenaParameters.WorkGroup %}"
            },
            "Output": {
                "QueryExecutionId": "{% $states.result.QueryExecution.QueryExecutionId %}"
            }
        },
        "Get record Ids from query result": {
            "Type": "Task",
            "Resource": "arn:aws:states:::athena:getQueryResults",
            "Next": "Has results?",
            "Arguments": {
                "MaxResults": "{% $AthenaParameters.MaxResultsPerRequest %}",
                "QueryExecutionId": "{% $states.input.QueryExecutionId %}"
            },
            "Output": {
                "Rows": "{% [$states.result.ResultSet.Rows#$i[$i>0]] %}"
            },
            "Assign": {
                "QueryExecutionId": "{% $states.input.QueryExecutionId %}",
                "NextToken": "{% $states.result.NextToken ? $states.result.NextToken : '' %}"
            }
        },
        "Has results?": {
            "Type": "Choice",
            "Choices": [
                {
                    "Next": "Process each record",
                    "Comment": "Results found",
                    "Condition": "{% $count($states.input.Rows) > 0 %}"
                }
            ],
            "Default": "Success",
            "Comment": "Has results to process"
        },
        "Process each record": {
            "Type": "Map",
            "ItemProcessor": {
                "ProcessorConfig": {
                    "Mode": "DISTRIBUTED",
                    "ExecutionType": "STANDARD"
                },
                "StartAt": "Get record",
                "States": {
                    "Get record": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::athena:startQueryExecution.sync",
                        "Arguments": {
                            "QueryExecutionContext": {
                                "Catalog": "AwsDataCatalog",
                                "Database": "{% $states.input.AthenaParameters.Database %}"
                            },
                            "QueryString": "{% $replace($states.input.AthenaParameters.GetRecordQuery, '{}', $states.input.Record) %}",
                            "WorkGroup": "{% $states.input.AthenaParameters.WorkGroup %}"
                        },
                        "Output": {
                            "QueryExecutionId": "{% $states.result.QueryExecution.QueryExecutionId %}"
                        },
                        "Next": "Get record from query result",
                        "Assign": {
                            "RecordId": "{% $states.input.Record %}"
                        }
                    },
                    "Get record from query result": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::athena:getQueryResults",
                        "Arguments": {
                            "QueryExecutionId": "{% $states.input.QueryExecutionId %}"
                        },
                        "Output": {
                            "Rows": "{% $states.result.ResultSet.Rows %}",
                            "NumberOfRows": "{% $count($states.result.ResultSet.Rows#$i[$i>0]) %}"
                        },
                        "Next": "Has data?"
                    },
                    "Has data?": {
                        "Type": "Choice",
                        "Default": "No data found",
                        "Choices": [
                            {
                                "Next": "Format record",
                                "Condition": "{% $states.input.NumberOfRows > 0 %}"
                            }
                        ]
                    },
                    "No data found": {
                        "Type": "Pass",
                        "End": true
                    },
                    "Format record": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::lambda:invoke",
                        "Retry": [
                            {
                                "ErrorEquals": [
                                    "Lambda.ServiceException",
                                    "Lambda.AWSLambdaException",
                                    "Lambda.SdkClientException",
                                    "Lambda.TooManyRequestsException"
                                ],
                                "IntervalSeconds": 1,
                                "MaxAttempts": 3,
                                "BackoffRate": 2
                            }
                        ],
                        "Next": "Get prompt",
                        "Arguments": {
                            "Payload": "{% $states.input %}",
                            "FunctionName": "${FORMAT_RECORD_FUNCTION}"
                        },
                        "Assign": {
                            "Report": "{% $parse($states.result.Payload).report %}"
                        }
                    },
                    "Get prompt": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
                        "Next": "Call generative AI",
                        "Arguments": {
                            "Name": "${PROMPT_TEMPLATE_PARAMETER_NAME}"
                        },
                        "Output": {
                            "Prompt": "{% $states.result.Parameter.Value %}"
                        }
                    },
                    "Call generative AI": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::bedrock:invokeModel",
                        "Retry": [
                            {
                                "ErrorEquals": [
                                    "Bedrock.InternalServerException",
                                    "Bedrock.ModelTimeoutException",
                                    "Bedrock.ServiceQuotaExceededException",
                                    "Bedrock.ThrottlingException"
                                ],
                                "BackoffRate": 2,
                                "IntervalSeconds": 30,
                                "MaxAttempts": 10,
                                "JitterStrategy": "FULL"
                            }
                        ],
                        "Next": "Process generative AI output",
                        "Arguments": {
                            "ModelId": "${BEDROCK_MODEL_ID}",
                            "Body": {
                                "anthropic_version": "bedrock-2023-05-31",
                                "max_tokens": 512,
                                "messages": [
                                    {
                                        "role": "user",
                                        "content": [
                                            {
                                                "type": "text",
                                                "text": "{% $replace($states.input.Prompt, '{}', $Report) %}"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        "Output": {
                            "recordId": "{% $RecordId %}",
                            "updatedTime": "{% $states.context.Execution.StartTime %}",
                            "modelResponse": "{% $states.result.Body %}"
                        }
                    },
                    "Process generative AI output": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::lambda:invoke",
                        "Retry": [
                            {
                                "ErrorEquals": [
                                    "Lambda.ServiceException",
                                    "Lambda.AWSLambdaException",
                                    "Lambda.SdkClientException",
                                    "Lambda.TooManyRequestsException"
                                ],
                                "IntervalSeconds": 1,
                                "MaxAttempts": 3,
                                "BackoffRate": 2
                            }
                        ],
                        "Next": "Save results",
                        "Arguments": {
                            "Payload": "{% $states.input %}",
                            "FunctionName": "${PROCESS_GEN_AI_OUTPUT_FUNCTION}"
                        },
                        "Output": {
                            "Item": "{% $states.result.Payload %}"
                        }
                    },
                    "Save results": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::dynamodb:putItem",
                        "End": true,
                        "Arguments": {
                            "TableName": "${RESULTS_TABLE_NAME}",
                            "Item": "{% $states.input.Item %}"
                        }
                    }
                }
            },
            "Next": "Has more results?",
            "Label": "Processeachrecord",
            "MaxConcurrency": 10,
            "Items": "{% $states.input.Rows %}",
            "ItemSelector": {
                "AthenaParameters": "{% $AthenaParameters %}",
                "Record": "{% $states.context.Map.Item.Value.Data[0].VarCharValue %}"
            }
        },
        "Has more results?": {
            "Type": "Choice",
            "Default": "Success",
            "Choices": [
                {
                    "Next": "Get record Ids with NextToken",
                    "Condition": "{% $boolean($NextToken) %}"
                }
            ]
        },
        "Get record Ids with NextToken": {
            "Type": "Task",
            "Resource": "arn:aws:states:::athena:getQueryResults",
            "Next": "Has results?",
            "Arguments": {
                "MaxResults": "{% $AthenaParameters.MaxResultsPerRequest %}",
                "NextToken": "{% $NextToken %}",
                "QueryExecutionId": "{% $QueryExecutionId %}"
            },
            "Output": {
                "Rows": "{% $states.result.ResultSet.Rows %}"
            },
            "Assign": {
                "NextToken": "{% $states.result.NextToken ? $states.result.NextToken : '' %}"
            }
        },
        "Success": {
            "Type": "Succeed"
        }
    }
}